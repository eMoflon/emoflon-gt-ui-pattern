/*
 * generated by Xtext 2.11.0
 */
package org.moflon.gt.mosl.pattern.language.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.moflon.gt.mosl.pattern.language.validation.MOSLPatternValidator
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.ui.editor.quickfix.Fix
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.moflon.gt.mosl.pattern.language.validation.MOSLPatternValidatorUtil
import org.eclipse.core.runtime.NullProgressMonitor
import org.eclipse.core.resources.IResource

/**
 * Custom quickfixes.
 *
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class MOSLPatternQuickfixProvider extends DefaultQuickfixProvider {

@Fix(MOSLPatternValidator.LIBRARY_FOLDER_DOES_NOT_EXIST)
def createFolderAndFile(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(
			issue,
			"create necessary resources", // label
			"creates the library folder and the library file", // description
			null, // icon 
			new ISemanticModification() {
				override apply(EObject element, IModificationContext context) {
					var monitor = new NullProgressMonitor
					var libFolder = MOSLPatternValidatorUtil.instance.getLibFolder(element)
					libFolder.create(true,true, monitor)
					
					val libFile = MOSLPatternValidatorUtil.instance.getLibFile(element)
					libFile.create(null,true, monitor)
					libFolder.project.refreshLocal(IResource.DEPTH_INFINITE, monitor)
				}
			}
		)
	}
	
	@Fix(MOSLPatternValidator.LIBRARY_FILE_DOES_NOT_EXIST)
	def createFile(Issue issue, IssueResolutionAcceptor acceptor){
		acceptor.accept(
			issue,
			"create necessary library file", // label
			"creates the library file", // description
			null, // icon 
			new ISemanticModification() {
				override apply(EObject element, IModificationContext context) {
					var monitor = new NullProgressMonitor
					var libFolder = MOSLPatternValidatorUtil.instance.getLibFolder(element)
					
					val libFile = MOSLPatternValidatorUtil.instance.getLibFile(element)
					libFile.create(null,true, monitor)
					libFolder.project.refreshLocal(IResource.DEPTH_INFINITE, monitor)
				}
			}
		)
	}
}
