grammar org.moflon.gt.mosl.pattern.language.MOSLPattern with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
//import "platform:/plugin/org.moflon.sdm.constraints.operationspecification/model/Operationspecification.ecore" as ospec

generate moslPattern "http://www.moflon.org/gt/mosl/pattern/language/MOSLPattern"


GraphTransformationPatternFile: 
	imports += Import*
	//using += Using*	'package' name = QualifiedName	
	modules += PatternModule*
;

PatternModule:'module' name = ID '{'
		definitions += Definition*
	'}'
;

Definition:ConstraintDef | PatternDef;

ConstraintDef: (isPublic?='public')? 'defineConstraint' name = ID '(' (parameters += ConstraintDefParameter) (',' parameters += ConstraintDefParameter)* ')';

ConstraintDefParameter:name = ID ':' type = [ecore::EDataType | QualifiedName];

PatternDef:'pattern' name=ID '(' (parameters += PatternParameter)? (',' parameters += PatternParameter)* ')' '{'	
	variables += NACAndObjectVariable*
	csps = ComplexAttributeConstraints?
	'}'
;

ComplexAttributeConstraints:{ComplexAttributeConstraints} 'attributeConstraints' '{' 
	constraints += Constraint*
'}';

Constraint: name = [ConstraintDef] '(' args += ConstraintArgument? (',' args += ConstraintArgument)*')';

ConstraintArgument: AttributeExpression | LiteralExpression | EnumExpression;

NACAndObjectVariable:NACGroup | ObjectVariablePattern;

ObjectVariablePattern:(op = Operator)? name = ID ':' type = [ecore::EClass | QualifiedName] (':=' assignment=[ObjectVariablePattern | QualifiedName])? ('{' 
		attributeAssignments += AttributeAssignment*
		attributeConstraints += AttributeConstraint*
		linkVariablePatterns += LinkVariablePattern*	
'}')?;

NACGroup:{NACGroup}	'nac' (name =ID)? '{'
	objects+=ObjectVariablePattern*
	'}'
;

PatternParameter:ObjectVariablePattern;


AttributeConstraint:
	name = [ecore::EAttribute] op=('==' | '!=' | '<=' | '>=' | '>' | '<') valueExp = Expression
;

AttributeAssignment:
	name = [ecore::EAttribute] op=':=' valueExp = Expression
;

Expression:
	(LiteralExpression | AttributeExpression | EnumExpression)
;

EnumExpression:
	 'enum::' eenum=[ecore::EEnum | QualifiedName] '::' literal = [ecore::EEnumLiteral | QualifiedName]  
;

AttributeExpression:
	objectVar = [ObjectVariablePattern] '.' name = [ecore::EAttribute]
;

LiteralExpression:
	IntegerLiteralExpression | DecimalLiteralExpression | StringLiteralExpression | BooleanLiteralExpression
;

IntegerLiteralExpression:
	value = IntegerLiteralValue
;

DecimalLiteralExpression:
	value = DecimalLiteralValue
;

StringLiteralExpression:
	value = StringLiteralValue
;

BooleanLiteralExpression:
	value = BooleanLiteralValue
;

LinkVariablePattern:
	(op = Operator)? '-' reference = [ecore::EReference] '->' target = [ObjectVariablePattern]
;

Operator:
	value = OPERATOR_VALUE
;


BooleanLiteralValue returns ecore::EBoolean:BOOL;

DecimalLiteralValue returns ecore::EDouble:('-')?DECIMAL;

StringLiteralValue returns ecore::EString: STRING;

IntegerLiteralValue returns ecore::EInt: ('-')?INT;

/* ---------------- */
/*    Auxiliaries   */
/* ---------------- */



Import:
	'import' name = STRING
;

Using:
	'using' importedNamespace = QualifiedNameWithWildcard
;

terminal OPERATOR_VALUE: '++'| '!' | '--';

terminal DECIMAL: INT '.' INT;

terminal BOOL:
	'true' | 'false'
;

QualifiedNameWithWildcard:
	QualifiedName '.*'
;

QualifiedName returns ecore::EString:
	ID ('.' ID)*
;


// additional declarations for typing

AbstractAttribute: AttributeConstraint | AttributeAssignment;

AttributeContainer:AbstractAttribute | AttributeExpression;

PatternObject: PatternVariable | Expression;

PatternVariable:NACAndObjectVariable | LinkVariablePattern;

//ObjectVariableDefinition: ;

