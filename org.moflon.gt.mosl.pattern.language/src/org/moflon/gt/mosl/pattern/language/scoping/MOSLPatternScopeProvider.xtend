/*
 * generated by Xtext 2.11.0
 */
package org.moflon.gt.mosl.pattern.language.scoping

import org.moflon.ide.mosl.core.scoping.ScopeProviderHelper
import org.eclipse.emf.ecore.EPackage
import org.apache.log4j.Logger
import org.moflon.ide.mosl.core.exceptions.CannotFindScopeException
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.emf.ecore.EClassifier
import org.moflon.gt.mosl.pattern.language.moslPattern.LinkVariablePattern
import org.moflon.gt.mosl.pattern.language.moslPattern.ObjectVariablePattern
import org.moflon.codegen.eclipse.CodeGeneratorPlugin
import org.moflon.gt.mosl.pattern.language.moslPattern.GraphTransformationPatternFile
import java.util.Stack
import org.eclipse.emf.common.util.URI

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MOSLPatternScopeProvider extends AbstractMOSLPatternScopeProvider {
	private ScopeProviderHelper<EPackage> helper = new ScopeProviderHelper();
	private Logger log = Logger.getLogger(MOSLPatternScopeProvider.getClass());
	
	override getScope(EObject context, EReference reference) {
	try{
		if(searchForEClassifier(context,reference)){
			return getScopeByType(context, EClassifier)
		}
		else if(searchForEReferences(context, reference)){
			return getScopeByType(context, EReference)
		}
	}catch (CannotFindScopeException e){
		log.debug("Cannot find Scope",e)
	}
		super.getScope(context, reference);
	}
	
	def boolean searchForEReferences(EObject context, EReference reference) {
		return context instanceof LinkVariablePattern && reference.name.equals("type")
	}
	
	def getScopeByType(EObject context, Class<? extends EObject> type)throws CannotFindScopeException{
		val set = helper.resourceSet
		CodeGeneratorPlugin.createPluginToResourceMapping(set);		
		var gtf = getGraphTransformationFile(context)
		var uris = gtf.imports.map[importValue | URI.createURI(importValue.name)];
		return helper.createScope(uris, EPackage, type);		 
	}
	
	def GraphTransformationPatternFile getGraphTransformationFile(EObject context){
		var stack = new Stack<EObject>
		stack.push(context)
		while(stack.size > 0){
			var element = stack.pop
			if(element instanceof GraphTransformationPatternFile)
				return element
			if(element.eContainer !== null)
				stack.push(element.eContainer)
		}		
		return null
	}
	
	def boolean searchForEClassifier(EObject context, EReference reference){
		return context instanceof ObjectVariablePattern  && reference.name.equals("type")
	}
}
